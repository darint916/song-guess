/* tslint:disable */
/* eslint-disable */
/**
 * SongGuessBackend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GeneralSongReadDto,
  Song,
  SongCreateDto,
} from '../models';
import {
    GeneralSongReadDtoFromJSON,
    GeneralSongReadDtoToJSON,
    SongFromJSON,
    SongToJSON,
    SongCreateDtoFromJSON,
    SongCreateDtoToJSON,
} from '../models';

export interface CreateSessionRequest {
    username: string;
}

export interface CreateSongRequest {
    songCreateDto?: Array<SongCreateDto>;
}

export interface GetSessionIDRequest {
    nameId: string;
}

export interface GetSongRequest {
    sessionId: string;
}

export interface GetSongInfoRequest {
    id: number;
}

export interface VerifySongRequest {
    sessionId: string;
    songName: string;
}

/**
 * 
 */
export class SongApi extends runtime.BaseAPI {

    /**
     */
    async createSessionRaw(requestParameters: CreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling createSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/artists/twice/users/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createSession(requestParameters: CreateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createSessionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createSongRaw(requestParameters: CreateSongRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/artists/twice/song`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.songCreateDto.map(SongCreateDtoToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createSong(requestParameters: CreateSongRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createSongRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllSongsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GeneralSongReadDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/artists/twice/song`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GeneralSongReadDtoFromJSON));
    }

    /**
     */
    async getAllSongs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GeneralSongReadDto>> {
        const response = await this.getAllSongsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSessionIDRaw(requestParameters: GetSessionIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.nameId === null || requestParameters.nameId === undefined) {
            throw new runtime.RequiredError('nameId','Required parameter requestParameters.nameId was null or undefined when calling getSessionID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/artists/twice/users/{nameId}`.replace(`{${"nameId"}}`, encodeURIComponent(String(requestParameters.nameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getSessionID(requestParameters: GetSessionIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getSessionIDRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getSongRaw(requestParameters: GetSongRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getSong.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/artists/twice/song/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getSong(requestParameters: GetSongRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getSongRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getSongInfoRaw(requestParameters: GetSongInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Song>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSongInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/artists/twice/song/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SongFromJSON(jsonValue));
    }

    /**
     */
    async getSongInfo(requestParameters: GetSongInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Song> {
        const response = await this.getSongInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async verifySongRaw(requestParameters: VerifySongRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling verifySong.');
        }

        if (requestParameters.songName === null || requestParameters.songName === undefined) {
            throw new runtime.RequiredError('songName','Required parameter requestParameters.songName was null or undefined when calling verifySong.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/artists/twice/users/{sessionId}/song/{songName}/verify`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"songName"}}`, encodeURIComponent(String(requestParameters.songName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async verifySong(requestParameters: VerifySongRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.verifySongRaw(requestParameters, initOverrides);
    }

}
